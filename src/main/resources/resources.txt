https://ourairports.com/data/
https://openflights.org/data.html


https://getbootstrap.com/docs/3.3/getting-started/

https://stackoverflow.com/questions/39866000/java-try-with-resource-not-working-with-scala

// Version 1
val route: Route =
    handleRejections(RejectionHandler.default) {
        headerValueByName("X-value") { headerVal =>
            pathPrefix("some" / "path") {
                pathEndOrSingleSlash {
                    post {
                        callFunction()
                    } ~
                    get {
                        anotherFunction()
                    } ~
                    delete {
                        yetAnotherFunction()
                    } ~
                        pathPrefix(Segment) { id =>
                            get {
                                getId(id)
                            } ~
                            delete {
                                deleteId(id)empty
                            }
                        }
                }
            }
        }
    }

def callFunction: Route = {
    complete(OK, request)
}

// Version 2

val route: Route =
    handleRejections(RejectionHandler.default) {
        headerValueByName("X-value") { headerVal =>
            pathPrefix("some" / "path") {
                pathEndOrSingleSlash {
                    someFunction(headerVal)
                }
            }
        }
    }

    def someFunction(headerVal: String): Route =
        post {
            entity(as[SomeType]) { requestType =>
                onSuccess(someService.call(headerVal, requestType)) { responses =>
                    complete(OK, responses)
                }
            }
        }



package com.grndctl.model.metar

import spray.json.DefaultJsonProtocol._
import spray.json.RootJsonFormat

/**
  * @author Michael Di Salvo
  * michael.vincent.disalvo@gmail.com
  */
case class METAR(rawText: String,
                 stationId: String,
                 observationTime: String,
                 latitude: Float,
                 longitude: Float,
                 tempC: Float,
                 dewpointC: Float,
                 windDirDegrees: Int,
                 windSpeedKt: Int,
                 windGustKt: Int,
                 visibilityStatuteMi: Float,
                 altimInHg: Float,
                 seaLevelPressureMb: Float,
                )

object METAR {
  implicit val metarFormat: RootJsonFormat[METAR] = jsonFormat13(METAR.apply)
}

/**
@XmlElement(name = "quality_control_flags")
    protected QualityControlFlags qualityControlFlags;
@XmlElement(name = "wx_string")
    protected String wxString;
@XmlElement(name = "sky_condition")
    protected List<SkyCondition> skyCondition;
@XmlElement(name = "flight_category")
    protected String flightCategory;
@XmlElement(name = "three_hr_pressure_tendency_mb")
    protected Float threeHrPressureTendencyMb;
@XmlElement(name = "maxT_c")
    protected Float maxTC;
@XmlElement(name = "minT_c")
    protected Float minTC;
@XmlElement(name = "maxT24hr_c")
    protected Float maxT24HrC;
@XmlElement(name = "minT24hr_c")
    protected Float minT24HrC;
@XmlElement(name = "precip_in")
    protected Float precipIn;
@XmlElement(name = "pcp3hr_in")
    protected Float pcp3HrIn;
@XmlElement(name = "pcp6hr_in")
    protected Float pcp6HrIn;
@XmlElement(name = "pcp24hr_in")
    protected Float pcp24HrIn;
@XmlElement(name = "snow_in")
    protected Float snowIn;
@XmlElement(name = "vert_vis_ft")
    protected Integer vertVisFt;
@XmlElement(name = "metar_type")
    protected String metarType;
@XmlElement(name = "elevation_m")
    protected Float elevationM;


  **/

  package com.grndctl.model.metar

import spray.json.DefaultJsonProtocol._
import spray.json.RootJsonFormat

object METAR extends METAR {
//  implicit val metarFormat: RootJsonFormat[METAR] = jsonFormat30(x)
}

lazy val unpackSwagger = taskKey[Seq[File]]("Does some stuff")
unpackSwagger := {
  val swaggerUiJar = (Compile / managedClasspath).value.files
    .filter(_.getAbsoluteFile.getName == s"${swaggerUi.name}-${swaggerUi.revision}.jar")
    .head
  val temp = IO.createTemporaryDirectory
  temp.deleteOnExit()
  IO.unzip(swaggerUiJar, temp)
  val swaggerSources = (temp / "META-INF" / "resources" / "webjars" / swaggerUi.name / swaggerUi.revision ** "*").get
  val targetDir = (Compile / resourceManaged).value / "swagger"
  val filesToCopy = swaggerSources.filterNot(_.isDirectory).map(file => (file, targetDir / file.name))
  IO.copy(filesToCopy)
  streams.value.log.info(s"Unpacled swagger into $targetDir")
  filesToCopy.map(_._2)
}

package com.grndctl.misc

import java.nio.file.{Files, Paths}

import com.grndctl.controllers.SwaggerController

/**
  * @author Michael Di Salvo
  * michael.vincent.disalvo@gmail.com
  */
object SchemaGenerator {
  val config = new Config()

  def main(args: Array[String]): Unit = {
    val schemaYaml = new SwaggerController(config.httpHost, config.httpPort).generateSwaggerYaml

    val dir = Paths.get("target/swagger")
    if (!Files.exists(dir)) Files.createDirectory(dir)
    val swaggerFile = dir.resolve("swagger.yaml")

    Files.write(swaggerFile, schemaYaml.getBytes)
  }
}

// Coredns config-map
// mv /run/systemd/resolve/stub-resolv.conf stub-resolv.conf.bak
// touch stub-resolv.conf
// copy contents of /run/systemd/resolve/resolv.conf
// Update coredns config-map
.:53 {
    errors
    health
    kubernetes cluster.local in-addr.arpa ip6.arpa {
       pods insecure
       upstream
       fallthrough in-addr.arpa ip6.arpa
    }
    prometheus :9153
    proxy . /etc/resolv.conf
    cache 30
    loop
    reload
    loadbalance
}


swagger: "2.0"
info:
  title: "Airport Status Web Service"
  description: FAA Airport Status Web Service API
  contact:
    email: edai-aero@faa.gov
    name: Airport Status Web Service (ASWS)
    url: http://fly.faa.gov
  license:
    name: "Creative Commons 0 (CC0)"
    url: "https://creativecommons.org/publicdomain/zero/1.0/legalcode"
  version: "1.1.0"
host: soa.smext.faa.gov
basePath: /asws
tags:
  - name: FAA Airport Status Service
schemes:
  - https
paths:
  /api/airport/delays:
    get:
      tags:
        - FAA Airport Status Service
      summary: Get airport delay summary for major US national airports.
      description: >-
        The airport status is retrieved from fly.faa.gov and is provided in a
        format that can be used by applications that require airport status
        data.Delays will be returned for the following airports: BOS, LGA, TEB,
        EWR, JFK, PHL, PIT, IAD, BWI, DCA, RDU, CLT, ATL, MCO, TPA, MCO, FLL,
        MIA, DTW, CLE, MDW, ORD, IND, CVG, BNA, MEM, STL, MCI, MSP, DFW, IAH,
        DEN, SLC, PHX, LAS, SAN, LAX, SJC, SFO, PDX, SEA
      operationId: getDelays
      produces:
        - application/json
        - application/xml
      parameters: []
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/Delays"
        "404":
          description: "Airport delays from http://www.fly.faa.gov are unavailable"
        "500":
          description: >-
            Airport information from http://www.fly.faa.gov returned an error
            response
  "/api/airport/status/{airportCode}":
    get:
      tags:
        - FAA Airport Status Service
      summary: >-
        Get airport status based on path parameter provided on the API call. The
        path parameter is an IATA airport code.
      description: >-
        The airport status is retrieved from fly.faa.gov and is provided in a
        format that can be used by applications that require airport status
        data.Available airports include the following: BOS, LGA, TEB, EWR, JFK,
        PHL, PIT, IAD, BWI, DCA, RDU, CLT, ATL, MCO, TPA, MCO, FLL, MIA, DTW,
        CLE, MDW, ORD, IND, CVG, BNA, MEM, STL, MCI, MSP, DFW, IAH, DEN, SLC,
        PHX, LAS, SAN, LAX, SJC, SFO, PDX, SEA
      operationId: getAirportStatus
      produces:
        - application/json
        - application/xml
      parameters:
        - name: airportCode
          in: path
          required: true
          type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/AirportStatus"
        "404":
          description: Delays are available only for major United States airports
definitions:
  Status:
    type: object
    required:
      - avgDelay
      - closureBegin
      - closureEnd
      - endTime
      - maxDelay
      - minDelay
      - reason
      - trend
      - type
    properties:
      type:
        type: string
        xml:
          name: Type
      reason:
        type: string
        xml:
          name: Reason
      avgDelay:
        type: string
        xml:
          name: AvgDelay
      closureEnd:
        type: string
        xml:
          name: ClosureEnd
      closureBegin:
        type: string
        xml:
          name: ClosureBegin
      minDelay:
        type: string
        xml:
          name: MinDelay
      trend:
        type: string
        xml:
          name: Trend
      maxDelay:
        type: string
        xml:
          name: MaxDelay
      endTime:
        type: string
        xml:
          name: EndTime
    xml:
      name: Status

  Weather:
    type: object
    properties:
      content:
        type: array
        items:
          type: object
    xml:
      name: Weather

  GroundDelay:
    type: object
    required:
      - airport
      - avgTime
      - reason
    properties:
      airport:
        type: string
        xml:
          name: airport
      avgTime:
        type: string
        xml:
          name: avgTime
      reason:
        type: string
        xml:
          name: reason
    xml:
      name: GroundDelay

  GroundStop:
    type: object
    required:
      - airport
      - endTime
      - reason
    properties:
      airport:
        type: string
        xml:
          name: airport
      endTime:
        type: string
        xml:
          name: endTime
      reason:
        type: string
        xml:
          name: reason
    xml:
      name: GroundStop

  ArriveDepartDelay:
    type: object
    required:
      - airport
      - maxTime
      - reason
      - minTime
    properties:
      airport:
        type: string
        xml:
          name: airport
      maxTime:
        type: string
        xml:
          name: maxTime
      reason:
        type: string
        xml:
          name: reason
      minTime:
        type: string
        xml:
          name: minTime
    xml:
      name: ArriveDepartDelay

  Closure:
    type: object
    required:
      - airport
      - reason
      - reopen
    properties:
      airport:
        type: string
        xml:
          name: airport
      reason:
        type: string
        xml:
          name: reason
      reopen:
        type: string
        xml:
          name: reopen
    xml:
      name: closure

  GroundDelays:
    type: object
    properties:
      GroundDelay:
        type: array
        items:
          $ref: "#/definitions/GroundDelay"

  GroundStops:
    type: object
    properties:
      GroundStop:
        type: array
        items:
          $ref: "#/definitions/GroundStop"

  ArriveDepartDelays:
    type: object
    properties:
      ArriveDepartDelay:
        type: array
        items:
          $ref: "#/definitions/ArriveDepartDelay"

  Closures:
    type: object
    properties:
      Closure:
        type: array
        items:
          $ref: "#/definitions/Closure"

  Delays:
    type: object
    properties:
      GroundDelays:
        type: array
        items:
          $ref: "#/definitions/GroundDelays"
      GroundStops:
        type: array
        items:
          $ref: "#/definitions/GroundStops"
      ArriveDepartDelays:
        type: array
        items:
          $ref: "#/definitions/ArriveDepartDelays"
      Closures:
        type: array
        items:
          $ref: "#/definitions/Closures"
    xml:
      name: Delays

  AirportStatus:
    type: object
    required:
      - city
      - iata
      - supportedAirport
      - delay
      - delayCount
      - icao
      - name
      - state
      - weather
    properties:
      name:
        type: string
        xml:
          name: Name
      city:
        type: string
        xml:
          name: City
      state:
        type: string
        xml:
          name: State
      icao:
        type: string
        xml:
          name: ICAO
      iata:
        type: string
        xml:
          name: IATA
      supportedAirport:
        type: boolean
        xml:
          name: SupportedAirport
      delay:
        type: boolean
        xml:
          name: Delay
        default: false
      delayCount:
        type: integer
        xml:
          name: DelayCount
        default: 0
      status:
        type: array
        xml:
          name: Status
        items:
          $ref: "#/definitions/Status"
      weather:
        xml:
          name: Weather
        $ref: "#/definitions/Weather"
    xml:
      name: AirportStatus


{
  "Name": "Washington Dulles Intl",
  "City": "Washington",
  "State": "DC",
  "ICAO": "KIAD",
  "IATA": "IAD",
  "SupportedAirport": true,
  "Delay": false,
  "DelayCount": 0,
  "Status": [
    {
      "Reason": "No known delays for this airport"
    }
  ],
  "Weather": {
    "Weather": [
      {
        "Temp": [
          "Fog/Mist"
        ]
      }
    ],
    "Visibility": [
      4.00
    ],
    "Meta": [
      {
        "Credit": "NOAA's National Weather Service",
        "Url": "http: //weather.gov/",
        "Updated": "Last Updated on Nov 19 2019, 1:52 am EST"
      }
    ],
    "Temp": [
      "41.0 F (5.0 C)"
    ],
    "Wind": [
      "Southwest at 3.5"
    ]
  }
}